#!/usr/bin/env bash

# The MIT License (MIT)
#
# Copyright (c) 2013-2014 Rob Zimmerman
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# RelayMyHome -- v. 1.1
# Original script by Rob Zimmerman (https://www.github.com/taintedzodiac)
# See other generous contributors, plus view the source, readme, and license at https://github.com/taintedzodiac/relaymyhome
# Tested in OS X 10.8 (Mountain Lion) and Mavericks

### The time we will pause on each MAC address
relay_time="90"
sleep_time="10"

wservice=$(/usr/sbin/networksetup -listallnetworkservices | grep -Ei '(wi-fi|airport)')
wifi=$(networksetup -listallhardwareports | awk "/${wservice}/,/Ethernet/"' getline { print $2 }')

WirelessMAC=$(networksetup -getmacaddress "${wifi}" | awk '{print $3}')
echo "Original MAC address is: $WirelessMAC"

function notify {
    if [ -z "${speak}" ] ; then
        echo "${@}" ;
    else
        say --interactive=green "${@}" ;
    fi
    return 0
}

function cleanup {
    sudo ifconfig "${wifi}" lladdr "${WirelessMAC}"
    networksetup -setairportpower "${wifi}" off
    networksetup -setairportpower "${wifi}" on

    echo "Cycling of Relays has completed, MAC address reverted."
    notify "Time to check your street passes!"
    return 0
}

function ctrl_c {
    # user quit midway through, so we should revert
    # the MAC address by calling our cleanup function
    echo "*** Interrupted ***"
    cleanup
    exit $?
}

function usage {
    echo "$0 [-c count] [-s]" 
    echo "c: the number of MAC addresses to cycle through."
    echo "s: audibly speak when the script is done"
}

# trap keyboard interrupt (control-c) or unexpected quit
trap ctrl_c SIGINT SIGTERM

while getopts hsc: option
do
    case "${option}" in
        h) usage ; exit ;;
        s) speak=1 ;;
        *) usage ; exit 1 ;
    esac
done

shift $((OPTIND - 1))

### TODO:
### * change this to a case statement
### * Make most of this into functions
### * Parse other cli options for verbosity and say vs silent
### * Put the list of MACs into a sqlite3 db and query only oldest visited ones?

if  [[ $1 == "full" || $1 == "fuller" || $1 == "quick" ]]
then
    # Generate a full list of 160 MACs when "full" mode is specified
    # To use full mode: ./relaymyhome full
    # Check the repo at github for more information.

    # Create an array for the last octet of the mac address, limited range.
    Addr=($(for X in {0..159} ; do echo ${X} | awk '{printf "%s%02X ", "4E:53:50:4F:4F:", $1}'; done ;))

    if [[ $1 == "full" ]]
    then 
      if [ $# -eq 1 ]
      then
          num=5
      else
          num=$(($2))
      fi
      echo "Full Mode enabled. Randomly seeding $num addresses from full list."
    else
      num=2
      echo "Quick Mode enabled. Randomly seeding ${num} addresses from full list."
    fi

    for ((a=1; a<=num; a++));
    do
        selectedAddr=${Addr[$RANDOM % ${#Addr[@]} ]}
        echo "Cycling WiFi..."
        sudo ifconfig "${wifi}" lladdr $selectedAddr
        networksetup -setairportpower "${wifi}" off
        sleep ${sleep_time}
        networksetup -setairportpower "${wifi}" on
        echo "Spoofing ${wifi} to ${selectedAddr} for ${relay_time} seconds ($a of $num)"
        sleep ${relay_time}
    done

# Get MAC addresses here: https://docs.google.com/spreadsheet/ccc?key=0AvvH5W4E2lIwdEFCUkxrM085ZGp0UkZlenp6SkJablE
elif [[ $1 == "custom" ]]
then
    baseAddr="4E:53:50:4F:4F:"
    main="46"
    smash="40"
    pokemon="45"
    zelda="43"
    acnl="47" # Also fantasy life
    fireemblem="48"
    bravelydefault="4C"
    
    if [[ $2 == "main" ]]
    then
        addr+=($baseAddr$main)
    elif [[ $2 == "smash" ]]
    then
        addr+=($baseAddr$smash)
    elif [[ $2 == "pokemon" ]]
    then
        addr+=($baseAddr$pokemon)
    elif [[ $2 == "zelda" ]]
    then
        addr+=($baseAddr$zelda)
    elif [[ $2 == "acnl" ]]
    then
        addr+=($baseAddr$acnl)
    elif [[ $2 == "fe" ]]
    then
        addr+=($baseAddr$fireemblem)
    elif [[ $2 == "bd" ]]
    then
        addr+=($baseAddr$bravelydefault)
    else
        addr+=($baseAddr$main)
        addr+=($baseAddr$smash)
        addr+=($baseAddr$pokemon)
        addr+=($baseAddr$zelda)
        addr+=($baseAddr$acnl)
        addr+=($baseAddr$fireemblem)
        addr+=($baseAddr$bravelydefault)
    fi

    echo "Custom Mode enabled. Connecting to game targeted addresses."
    n=1
    
    for a in "${addr[@]}"
    do
        echo "Cycling WiFi..."
        sudo ifconfig $wifi lladdr $a
        networksetup -setairportpower $wifi off
        networksetup -setairportpower $wifi on
        echo "Spoofing $wifi to $a for 90 seconds ($n of ${#addr[@]})"
        n=$((n+1))
        sleep ${relay_time}
    done
    

elif [[ $1 == "la" ]]
then
    addr[0]="00:1F:CA:60:3E:20" #streetpassLA
    addr[1]="58:8D:09:B1:8A:62" #santamonica here and below
    addr[2]="00:12:7F:CA:A1:A3"
    addr[3]="00:1F:9E:D3:84:60"
    addr[4]="00:0D:BD:AF:DA:4A"

    echo "Los Angeles Mode enabled. Connecting to five LA/Santa Monica addresses."
    n=1
    
    for a in "${addr[@]}"
    do
        echo "Cycling WiFi..."
        sudo ifconfig $wifi lladdr $a
        networksetup -setairportpower $wifi off
        networksetup -setairportpower $wifi on
        echo "Spoofing $wifi to $a for 90 seconds ($n of 5)"
        n=$((n+1))
        sleep ${relay_time}
    done

elif [[ $1 == "nyc" ]]
then
    addr[0]="00:25:9C:52:1C:6A" #nyc
    addr[1]="00:0D:67:15:2D:82"
    addr[2]="00:0D:67:15:D7:21"
    addr[3]="00:0D:67:15:D5:44"
    addr[4]="00:0D:67:15:D2:59"
    addr[5]="00:0D:67:15:D6:FD"

    echo "NYC Mode enabled. Connecting to six NYC addresses."
    n=1
    
    for a in "${addr[@]}"
    do
        echo "Cycling WiFi..."
        sudo ifconfig $wifi lladdr $a
        networksetup -setairportpower $wifi off
        networksetup -setairportpower $wifi on
        echo "Spoofing $wifi to $a for 90 seconds ($n of 5)"
        n=$((n+1))
        sleep ${relay_time}
    done

else
    # This set of MACs will be used in standard mode
    # Taken from: https://docs.google.com/spreadsheet/ccc?key=0AvvH5W4E2lIwdEFCUkxrM085ZGp0UkZlenp6SkJablE#gid=0
    # Usage: ./relaymyhome
    addr[0]='00:0D:67:15:2D:82'
    addr[1]='00:0D:67:15:D7:21'
    addr[2]='00:0D:67:15:D5:44'
    addr[3]='00:0D:67:15:D2:59'
    addr[4]='00:0D:67:15:D6:FD'
    addr[5]='4E:53:50:4F:4F:40'
    addr[6]='4E:53:50:4F:4F:41'
    addr[7]='4E:53:50:4F:4F:42'
    addr[8]='4E:53:50:4F:4F:43'
    addr[9]='4E:53:50:4F:4F:44'
    addr[10]='4E:53:50:4F:4F:45'
    addr[11]='4E:53:50:4F:4F:46'
    addr[12]='4E:53:50:4F:4F:47'
    addr[13]='4E:53:50:4F:4F:48'
    addr[14]='4E:53:50:4F:4F:49'
    addr[15]='4E:53:50:4F:4F:4A'
    addr[16]='4E:53:50:4F:4F:4B'
    addr[17]='4E:53:50:4F:4F:4C'
    addr[18]='4E:53:50:4F:4F:4D'
    addr[19]='4E:53:50:4F:4F:4E'
    addr[20]='4E:53:50:4F:4F:4F'

    echo "Standard Mode enabled. Connecting to the five Nintendo World relays and the sixteen Homepass relays."
    n=1

    for a in "${addr[@]}"
    do
        echo "Cycling WiFi..."
        sudo ifconfig "${wifi}" lladdr $a
        networksetup -setairportpower "${wifi}" off
        sleep ${sleep_time}
        networksetup -setairportpower "${wifi}" on
        echo "Spoofing ${wifi} to $a for 90 seconds ($n of 21)"
        n=$((n+1))
        sleep ${relay_time}
    done
fi

# ... and we are done

cleanup
